Project Name : EduRank 
Programming Assignment 3

Contributors:
Emirhan Gül 
Taha Denizbek Tavlan
Utku Karatepe
Rıdvan Umut Ünal


Tablo of Contents :

Deployment Overview 
Deployment Process
Configuration Plan
Acceptance Tests and Acceptance Criteria
Test Results Report
Test Results Overview 
Test Results Analysis 
Logs and Outputs


--Deployment Plan--

1. Deployment Overview

EduRank projesinin dağıtımı, test ve geliştirme aşamalarında yerel sunucu
ve sürekli entegrasyon/sürekli teslim (CI/CD) süreçleri kullanılarak gerçekleştirilmiştir.

Backend Dağıtımı: Backend bileşeni, takım üyelerimizden birinin bilgisayarında yerel bir Flask sunucusu olarak çalıştırılmıştır. 
Flask uygulaması, yerel bir MySQL veritabanına bağlanarak kullanıcı verilerini ve test sonuçlarını yönetmiştir.

Frontend Dağıtımı: Test sürecinde, Flutter ile geliştirilen mobil uygulamanın APK formatında bir test sürümü oluşturulmuş 
ve cihazlarda çalıştırılarak test edilmiştir.

Veritabanı: Backend ile entegre çalışan yerel bir MySQL sunucusu kullanılmıştır. Backend uygulaması, MySQL veritabanı 
bağlantısını sağlayarak gerekli verileri depolamıştır.

Geliştirme Ortamı: Proje geliştirme sürecinde Visual Studio Code, MySQL Workbench ve manuel geliştirme yöntemleri kullanılmıştır.

Dağıtım Süreci: Sürekli entegrasyon ve sürekli teslim (CI/CD) süreçleri uygulanarak, geliştirme ekibi GitHub üzerinden düzenli commit
ve push işlemleriyle kod tabanını güncel tutmuştur. Kod değişiklikleri anlık olarak takip edilerek, geliştirme ortamında test edilmiş
ve entegre edilmiştir.



2. Deployment Process

Backend Dağıtımı : 

Backend, ekibimizin lokal sunucusunda Flask ve MySQL kullanılarak dağıtıldı. Flask uygulaması, MySQL ile entegre edilerek çalıştırıldı.
Veritabanı bağlantısı için SQLAlchemy kullanıldı ve JWT kimlik doğrulama mekanizması eklendi. JWT sayesinde kullanıcı oturum yönetimi 
sağlandı ve belirlenen süreler içinde token geçerliliği ayarlandı. Veritabanı tablolarını oluşturmak için manuel SQL komutları 
kullanıldı. Kullanıcı bilgilerini saklamak ve çalışma istatistiklerini takip etmek amacıyla "users" tablosu oluşturuldu. Her kullanıcı 
için benzersiz bir kimlik, e-posta adresi ve hashlenmiş şifre saklanırken, toplam puan ve çalışma süresi de veritabanında tutuldu.
Dağıtım sırasında özel bir ortam değişkeni (".env" dosyası gibi) kullanılmadı, MySQL bağlantı bilgileri doğrudan kod içerisinde 
tanımlandı.Backend ve veritabanı testleri JSON dosyaları ve Postman kullanılarak gerçekleştirildi. API uç noktaları Postman üzerinden 
test edilerek isteklerin doğru şekilde işlendiği ve verilerin MySQL veritabanına başarılı bir şekilde kaydedildiği doğrulandı.


CI/CD ve Sürekli Entegrasyon :

Projede CI/CD için otomatikleştirilmiş bir sistem (GitHub Actions, Jenkins vb.) kullanılmadı. Ancak, geliştirme ekibinin her üyesi 
kodlarını sürekli olarak GitHub'a push etti ve her commit sonrası manuel testler gerçekleştirildi. Bir hata veya bug olduğunda version
kontrol yöntemi ile eski çalışan kod kullanılmaya devam edildi.

Frontend Dağıtımı :

Frontend testleri için uygulamanın APK dosyası oluşturuldu ve test cihazlarına doğrudan yüklenerek test edildi. Bunun için herhangi 
bir harici test platformu kullanılmadı.

Test Süreci :

Testler manuel olarak gerçekleştirildi. Test sürecinde:
Backend API'leri Postman veya manuel HTTP istekleri ile test edildi.
Frontend tarafında Flutter uygulaması APK olarak çalıştırılıp manuel testlerden geçirildi.
Veritabanı sorguları MySQL Workbench veya terminal aracılığıyla doğrulama yapılarak test edildi.
Sonuç olarak, proje lokal sunucu üzerinde dağıtıldı ve geliştirme ekibi tarafından manuel testlerle doğrulandı.
JSON dosyaları kullanılarak verilerin doğru işlendiği ve depolandığı kontrol edildi.


3. Configuration Plan:

Veritabanı ve JWT Ayarları :

Projede, kullanıcı bilgilerini ve diğer verileri saklamak için MySQL veritabanı kullanıldı. Flask uygulaması, bu veritabanına bağlanarak 
verileri depolamak için SQLAlchemy adlı bir kütüphane kullanıyor. Bu bağlantı, veritabanı adı ve bağlantı bilgileri (kullanıcı adı, 
şifre gibi) uygulama içinde doğrudan tanımlandı.

Veritabanı bağlantısının yanı sıra, kullanıcıların güvenli bir şekilde kimlik doğrulaması yapabilmesi için JWT (JSON Web Token) 
kullanılıyor. JWT, her kullanıcı için bir erişim token'ı ve bir yenileme token'ı oluşturuyor. Bu token'lar, kullanıcının uygulamaya 
giriş yapmasını sağlıyor ve kullanıcının oturumu boyunca güvenliği artırmak için kullanılıyor. Ayrıca, token'ların ne kadar süre 
geçerli olacağı da bu konfigürasyonla belirleniyor.

Kullanıcı Modeli ve Veritabanı Yapılandırması :

Uygulamanın veritabanında kullanıcı bilgileri saklanıyor. Her kullanıcı için benzersiz bir kullanıcı adı ve e-posta adresi bulunuyor.
Ayrıca, şifreler güvenlik amacıyla hashlenmiş şekilde saklanıyor. Bunun dışında, her kullanıcının toplam puanı ve çalışma süresi gibi 
istatistikler de veritabanında tutuluyor.

API Uç Noktaları (Endpoints) :

Projede, kullanıcı işlemleri için bir dizi API uç noktası (endpoint) oluşturuldu. Bu uç noktalar, kullanıcının kayıt olabilmesi,
giriş yapabilmesi, profil bilgilerini görüntüleyebilmesi gibi temel işlemleri gerçekleştiriyor.

Kayıt Olma: Kullanıcılar, uygulamaya kayıt olabilmek için kullanıcı adı, e-posta adresi ve şifre bilgilerini girerler. Uygulama,
bu bilgileri alır, doğrular ve veritabanına kaydeder.

Giriş Yapma: Kullanıcılar, mevcut kullanıcı adı veya e-posta adresi ile giriş yaparak bir erişim token'ı alırlar. 
Bu token, uygulama içindeki diğer işlemleri yapabilmek için kullanılır.

Profil Bilgisi Görüntüleme: Giriş yaptıktan sonra, kullanıcılar kendi profil bilgilerine erişebilirler. Bu işlem, kimlik doğrulama
token'ı ile güvence altına alınır.

Token Yenileme: Kullanıcılar, oturum süreleri dolmadan token'larını yenileyebilirler. Bu, kullanıcıların sürekli olarak yeniden 
giriş yapmalarını engeller.

Çıkış Yapma: Kullanıcı çıkış yaptıktan sonra, token'ı geçersiz kılınır. Bu sayede, kullanıcı bir sonraki girişinde tekrar kimlik 
doğrulaması yapması gerekir.

Flask ve MySQL’in yanı sıra JWT kullanımı, kullanıcı güvenliği ve verilerin doğru şekilde işlenmesi için önemli bir rol oynuyor. 
Uygulamanın tüm bu bileşenleri düzgün bir şekilde entegre edilerek dağıtım süreci başarıyla tamamlanmıştır.

--Acceptance Tests and Acceptance Criteria--

CASE 1: Kullanıcı Hesap Yönetimi

Kabul Kriterleri:
Kullanıcılar hesap oluşturabilmeli.
Kullanıcılar şifreleriyle giriş yapabilmeli.
Kullanıcılar hesaplarından çıkış yapabilmeli.

Kabul Testi:
Hesap Oluşturma Testi:
Kullanıcıdan gerekli bilgilerin (kullanıcı adı, e-posta, şifre) alındığı bir kayıt formu kullanılır.
Sistem, kullanıcının sağladığı bilgileri doğrular ve hesap oluşturur.
Kullanıcı, başarı mesajı alarak oluşturduğu hesapla sisteme giriş yapabilmelidir.
Beklenen Sonuç: Kullanıcı başarılı bir şekilde hesap oluşturabilmelidir.

Giriş Yapma Testi:
Kullanıcı, hesap bilgileriyle giriş yapar.
Kullanıcı adı ve şifre doğru olduğunda sisteme giriş yapılır, yanlış olduğunda hata mesajı gösterilir.
Beklenen Sonuç: Doğru bilgilerle giriş yapılabilmeli, yanlış bilgilerle hata mesajı gösterilmelidir.

Çıkış Yapma Testi:
Kullanıcı, sisteme giriş yaptıktan sonra çıkış yapar.
Çıkış işleminden sonra kullanıcı, tekrar giriş yapmak zorunda kalır.
Beklenen Sonuç: Çıkış yapıldıktan sonra, kullanıcı bir sonraki oturum için tekrar kimlik doğrulama yapmak zorunda kalmalıdır.



CASE 2: Test Çözme ve Sorular Arasında Geçiş

Kabul Kriterleri:

Kullanıcılar şifreleriyle giriş yapabilmeli.
Kullanıcılar test kategorilerinden seçim yapabilmeli.
Kullanıcılar test çözebilmelidir.
Kullanıcılar test çözerken sorular arasında geçiş yapabilmeli.
Kullanıcılar test çözerken yanıtlarını değiştirebilmeli.

Kabul Testi:
Test Seçimi ve Giriş Yapma Testi:
Kullanıcı giriş yaptıktan sonra test kategorilerinden birini seçer.
Seçilen kategoriye göre ilgili test başlatılır.
Beklenen Sonuç: Kullanıcı test kategorilerini seçebilmelidir.

Test Çözme ve Sorular Arası Geçiş Testi:
Kullanıcı, test çözme sırasında sorular arasında geçiş yapabilir.
Test süresince kullanıcı, mevcut sorularda geçiş yapmadan yanıtları değiştirebilir.

CASE 3: Çalışma Süresi Takibi ve Başkalarının Çalışma Süresi Görüntülenmesi

Kabul Kriterleri:
Kullanıcılar şifreleriyle giriş yapabilmeli.
Kullanıcılar çalışma sürelerini bir sayaç/kronometre yardımıyla kaydedebilmelidir.
Kullanıcılar birbirlerinin çalışma sürelerini görüntüleyebilmelidir.

Kabul Testi:
Çalışma Süresi Kaydetme Testi:
Kullanıcı, test çözmeye başlar ve sistem, çalışma süresini bir sayaç ile takip eder.
Beklenen Sonuç: Kullanıcının çalışma süresi düzgün bir şekilde kaydedilmelidir.
Başka Kullanıcıların Sürelerini Görüntüleme Testi:
Kullanıcı, diğer kullanıcıların çalışma sürelerini görüntüleyebilmelidir.
Beklenen Sonuç: Diğer kullanıcıların çalışma süreleri doğru bir şekilde görüntülenebilmelidir.

CASE 4: Çalışma İstatistikleri ve Test Sonuçları Görüntülenmesi

Kabul Kriterleri:
Kullanıcılar şifreleriyle giriş yapabilmeli.
Kullanıcıların çalışma istatistikleri ve test sonuçları kaydedilmelidir/görüntülenebilmelidir.
Kullanıcılar birbirlerinin test başarı oranlarını görüntüleyebilmelidir.

Kabul Testi:
Test Sonuçlarını Görüntüleme Testi:
Kullanıcı, çözmüş olduğu testlerin sonuçlarını ve başarı oranlarını görüntüleyebilmelidir.
Beklenen Sonuç: Test sonuçları ve başarı oranları doğru bir şekilde kaydedilmeli ve görüntülenmelidir.
Liderlik Tablosu Görüntüleme Testi:
Kullanıcılar, liderlik tablosunda diğer kullanıcıların test başarı oranlarını görebilir.
Beklenen Sonuç: Kullanıcılar, birbirlerinin başarı oranlarını doğru bir şekilde görüntüleyebilmelidir.

--Test Results Report-- 

Test Results Overview :

Test 1: Kullanıcı Kaydı ve Giriş

Test Durumu: Pass
Açıklama: Kullanıcı, geçerli bilgileriyle başarılı bir şekilde hesap oluşturdu ve ardından giriş yaptı.
Başarı Durumu: API'lere yapılan istekler doğru çalıştı ve veritabanına kullanıcı kaydedildi.
Karşılaşılan Sorunlar: Herhangi bir sorun yaşanmadı.

Test 2: Test Çözme ve Yanıtları Değiştirme

Test Durumu: Pass
Açıklama: Kullanıcı, test kategorisini seçip sorular arasında geçiş yaptı. Ayrıca, sorulara verdiği yanıtları değiştirebildi.
Başarı Durumu: Soruların geçişi ve yanıtların değiştirilebilmesi işlevsel olarak doğru çalıştı.
Karşılaşılan Sorunlar: Herhangi bir sorun yaşanmadı.

Test 3: Çalışma Süresi Takibi ve İstatistikler

Test Durumu: Pass
Açıklama: Kullanıcılar çalışma sürelerini takip edebildiler. Ayrıca, diğer kullanıcıların çalışma süreleri de başarıyla görüntülenebildi.
Başarı Durumu: Süre kaydı ve görüntülenmesi doğru çalıştı.
Karşılaşılan Sorunlar: Herhangi bir sorun yaşanmadı.

Test 4: Liderlik Tablosu ve Test Sonuçları Görüntüleme

Test Durumu: Pass
Açıklama: Kullanıcılar, başarı oranlarını ve diğer kullanıcıların test sonuçlarını başarıyla görüntüleyebildiler.
Başarı Durumu: Test sonuçları veritabanına doğru kaydedildi ve liderlik tablosu doğru şekilde çalıştı.
Karşılaşılan Sorunlar: Herhangi bir sorun yaşanmadı.


Test Results Analysis :

Test 1 (Kullanıcı Kaydı ve Giriş):

Analiz: Test başarılı bir şekilde geçti. Kullanıcı kaydı ve giriş işlemleri sorunsuz çalıştı.
Çözüm: Test sırasında herhangi bir hata ya da aksaklık yaşanmadığı için çözüm gerekmemektedir.

Test 2 (Test Çözme ve Yanıtları Değiştirme):

Analiz: Test geçerli kullanıcılar için başarıyla tamamlandı. Kullanıcılar sorular arasında geçiş yaptı ve yanıtlarını değiştirebildiler.
Çözüm: Uygulamanın çalışma hızına ilişkin herhangi bir sorun olmadı.

Test 3 (Çalışma Süresi Takibi ve İstatistikler):

Analiz: Çalışma süresi kaydedildi ve görüntülenebildi. İstatistiklerin doğru şekilde hesaplanıp veritabanına kaydedilmesi sağlandı.
Çözüm: Sistem stabil çalıştı ve herhangi bir problem gözlemlenmedi.

Test 4 (Liderlik Tablosu ve Test Sonuçları Görüntüleme):

Analiz: Test başarıyla tamamlandı. Kullanıcılar birbirlerinin başarı oranlarını ve test sonuçlarını doğru şekilde görüntüleyebildiler.
Çözüm: Bu test de herhangi bir aksaklık olmadan başarıyla tamamlandı.


Logs and Outputs: 

Her test için örnek test sonuçları :

Test 1: Kullanıcı Kaydı ve Giriş 

HTTP/1.1 201 Created
{
  "status": "success",
  "message": "User created successfully"
}

HTTP/1.1 200 OK
{
  "status": "success",
  "access_token": "xyz_token"
}

Test 2 (Test Çözme ve Yanıtları Değiştirme):

HTTP/1.1 200 OK
{
  "status": "success",
  "message": "Test started successfully"
}

HTTP/1.1 200 OK
{
  "status": "success",
  "message": "Moved to next question"
}

HTTP/1.1 200 OK
{
  "status": "success",
  "message": "Answer changed successfully"
}

Test 3 (Çalışma Süresi Takibi ve İstatistikler):

HTTP/1.1 200 OK
{
  "status": "success",
  "message": "Timer started"
}

HTTP/1.1 200 OK
{
  "status": "success",
  "total_time_spent": 1200
}

Test 4 (Liderlik Tablosu ve Test Sonuçları Görüntüleme):
HTTP/1.1 200 OK
{
  "status": "success",
  "data": [
    {"username": "user1", "score": 85},
    {"username": "user2", "score": 78}
  ]
}

HTTP/1.1 200 OK
{
  "status": "success",
  "data": {
    "test_id": "123",
    "score": 85
  }
}


-- Logs and Outputs --

Bazı örnek log ve outputlar:

Test 1: Kullanıcı Kaydı ve Giriş
Log: Kullanıcı kaydı sırasında yapılan işlem:
2025-03-25 14:30:01 [INFO] Flask Server Started
2025-03-25 14:30:05 [INFO] API /register accessed by user: testuser
2025-03-25 14:30:07 [INFO] User testuser successfully created in the database
2025-03-25 14:30:10 [INFO] API /login accessed by user: testuser
2025-03-25 14:30:11 [INFO] Login successful for user testuser, access token created

Output: Postman üzerinden alınan yanıt:
{
    "status": "success",
    "access_token": "abc123def456",
    "refresh_token": "xyz789uvw123"
}


Test 2: Test Çözme ve Yanıtları Değiştirme
Log: Test çözme işlemi sırasında yapılan işlem:

2025-03-25 14:35:01 [INFO] API /test/1 accessed, user: testuser
2025-03-25 14:35:05 [INFO] Test question 1 answered correctly by user testuser
2025-03-25 14:35:10 [INFO] Test question 2 answered incorrectly by user testuser
2025-03-25 14:35:12 [INFO] User testuser changed answer for question 2
2025-03-25 14:35:15 [INFO] Test submitted by testuser, score: 90%

Output: Postman üzerinden alınan yanıt:

{
    "status": "success",
    "message": "Test completed successfully",
    "score": 90
}


Test 3: Çalışma Süresi Takibi ve İstatistikler
Log: Çalışma süresi takibi:

2025-03-25 14:40:01 [INFO] API /start_timer accessed by user: testuser
2025-03-25 14:40:10 [INFO] Timer started for user testuser, tracking time
2025-03-25 14:45:01 [INFO] API /stop_timer accessed by user: testuser
2025-03-25 14:45:02 [INFO] Timer stopped for user testuser, total time spent: 300 seconds

Output: Postman üzerinden alınan yanıt:

{
    "status": "success",
    "message": "Time tracking completed",
    "total_time_spent": 300
}

Test 4: Liderlik Tablosu ve Test Sonuçları Görüntüleme
Log: Liderlik tablosu ve test sonuçları:

2025-03-25 14:50:01 [INFO] API /leaderboard accessed by user: testuser
2025-03-25 14:50:05 [INFO] Leaderboard retrieved successfully
2025-03-25 14:50:10 [INFO] User testuser's rank is 2nd with 90% score

Output: Postman üzerinden alınan yanıt:

{
    "status": "success",
    "leaderboard": [
        {"username": "user1", "score": 95},
        {"username": "testuser", "score": 90},
        {"username": "user3", "score": 85}
    ]
}

Bu testler genellikle api endpoitlerini test etmek için kullanılan POSTMAN aracılığı ile yapılmıştır.



TASK MATRİX :

Deployment Overview : Emirhan Gül

Deployment Process: Emirhan Gül

Configuration Plan: Emirhan Gül

Acceptance Tests and Acceptance Criteria: Taha Denizbek Tavlan

Test Results Report : Taha Denizbek Tavlan

Test Results Overview :Taha Denizbek Tavlan

Test Results Analysis : Utku Karatepe / Rıdvan Umut Ünal

Logs and Outputs: Utku Karatepe / Rıdvan Umut Ünal
