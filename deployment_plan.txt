Project Name: EduRank
**Programming Assignment 3

Table of Contents:
  List of Contributors
  Task Matrix
  Deployment Overview
  Deployment Process
  Configuration Plan

Contributors:
  Taha Denizbek Tavlan
  Rıdvan Umut Ünal
  Utku Karatepe
  Emirhan Gül

TASK MATRIX:
  Deployment Overview___Emirhan Gül, Rıdvan Umut Ünal
  Deployment Process____Taha Denizbek Tavlan, Rıdvan Umut Ünal 
  Configuration Plan____Utku Karatepe, Taha Denizbek Tavlan


--Deployment Plan--

Deployment Overview:

  EduRank projesinin dağıtımı, test ve geliştirme aşamalarında yerel sunucu ve sürekli entegrasyon/sürekli teslim (CI/CD) süreçleri kullanılarak gerçekleştirilmiştir.

  Backend Dağıtımı:
    Backend bileşeni, takım üyelerimizden birinin bilgisayarında yerel bir Flask sunucusu olarak çalıştırılmıştır. Flask uygulaması, yerel bir MySQL veritabanına
    bağlanarak kullanıcı verilerini ve test sonuçlarını yönetmiştir. Flask uygulaması, MySQL ile entegre edilerek çalıştırıldı. Veritabanı bağlantısı için SQLAlchemy 
    kullanıldı ve JWT kimlik doğrulama mekanizması eklendi. JWT sayesinde kullanıcı oturum yönetimi sağlandı ve belirlenen süreler içinde token geçerliliği ayarlandı.

  Frontend Dağıtımı:
    Test sürecinde, Flutter ile geliştirilen mobil uygulamanın APK formatında bir test sürümü oluşturulmuş ve cihazlarda çalıştırılarak test edilmiştir. Android Studio 
    üzerinde emülatör kullanılarak da test edilmiştir. UI testleri, kullanıcı giriş çıkışları, profil görüntüleme, test çözme, puan kaydı, liderlik tablosu görüntüleme, 
    sayaç ile süre tutma gibi tüm fonksiyonel senaryoları kapsayacak şekilde yapılmıştır. Tüm fonksiyonlar başarıyla test edilmiştir ve uygulama sorunsuz çalışmıştır. 
    Testler, Samsung Galaxy S22 ve Samsung Galaxy S23 Ultra cihazlarında doğrudan yüklenerek yapılmış olup, diğer cihazlar için test yapılmamıştır.

  Veritabanı:
    Backend ile entegre çalışan yerel bir MySQL sunucusu kullanılmıştır. Backend uygulaması, MySQL veritabanı bağlantısını sağlayarak gerekli verileri depolamıştır.

  Geliştirme Ortamı:
    Proje geliştirme sürecinde Visual Studio Code, MySQL Workbench ve manuel geliştirme yöntemleri kullanılmıştır.

  Dağıtım Süreci:
    Sürekli entegrasyon ve sürekli teslim (CI/CD) süreçleri otomatikleştirilmiş bir sistemle uygulanmamıştır. Ancak, geliştirme süreci boyunca takım üyeleri kendi 
    şahsi branch'lerinde çalışmalarını sürdürmüştür. Herhangi bir yeni değişiklik ve geliştirme tamamlandığında, her birey kendi branch'ini master branch ile merge 
    edip, güncel değişiklikleri master'a kaydetmiştir. Bu süreçte, master branch her zaman projenin en güncel halini içerecek şekilde tutulmuştur. Her takım üyesi, 
    her çalışmaya başladıklarında en son güncellemeleri almak için master branch'ten pull işlemi yaparak, geliştirmeye devam etmiştir.

  Commit Sayıları:
    Taha Denizbek Tavlan: 35 commit
    Rıdvan Umut Ünal: 35 commit
    Emirhan Gül: 17 commit
    Utku Karatepe: 24 commit
    Ortalama Commit Sayısı: Yaklaşık 27 commit kişi başı (proje süresince).

  Bu süreç, her bir takım üyesinin kendi geliştirdiği kodu güvenli bir şekilde entegre etmesine ve projedeki güncel değişiklikleri takip etmesine olanak sağlamıştır. 
  Sürekli entegrasyon sayesinde, proje kodu düzenli olarak güncellenmiş ve test edilmiş, böylece büyük kod hatalarının önüne geçilmiştir. Herhangi bir sorun durumunda, 
  eski commitlere geri dönülerek problem çözülmüştür.

2. Deployment Process

  Backend Dağıtımı:
    Backend, ekibimizin lokal sunucusunda Flask ve MySQL kullanılarak dağıtıldı. Flask uygulaması, MySQL ile entegre edilerek çalıştırıldı. Veritabanı bağlantısı için 
    SQLAlchemy kullanıldı ve JWT kimlik doğrulama mekanizması eklendi. Veritabanı tablolarını oluşturmak için manuel SQL komutları kullanıldı. Kullanıcı bilgilerini 
    saklamak ve çalışma istatistiklerini takip etmek amacıyla "users" tablosu oluşturuldu. Her kullanıcı için benzersiz bir kimlik, e-posta adresi ve hashlenmiş şifre 
    saklanırken, toplam puan ve çalışma süresi de veritabanında tutuldu.

  CI/CD ve Sürekli Entegrasyon:
    Projede sürekli entegrasyon ve sürekli teslim (CI/CD) süreçleri otomatikleştirilmiş bir sistemle uygulanmamıştır. Ancak, geliştirme süreci boyunca takım üyeleri 
    kendi şahsi branch'lerinde çalışmalarını sürdürmüştür. Herhangi bir yeni değişiklik ve geliştirme tamamlandığında, her birey kendi branch'ini master branch ile 
    merge edip, güncel değişiklikleri master'a kaydetmiştir. Bu süreçte, master branch her zaman projenin en güncel halini içerecek şekilde tutulmuştur. Her takım 
    üyesi, her çalışmaya başladıklarında en son güncellemeleri almak için master branch'ten pull işlemi yaparak, geliştirmeye devam etmiştir.

3. Configuration Plan

  Veritabanı ve JWT Ayarları:
    Projede, kullanıcı bilgilerini ve diğer verileri saklamak için MySQL veritabanı kullanıldı. Flask uygulaması, bu veritabanına bağlanarak verileri depolamak için 
    SQLAlchemy adlı bir kütüphane kullanıyor. Bu bağlantı, veritabanı adı ve bağlantı bilgileri (kullanıcı adı, şifre gibi) uygulama içinde doğrudan tanımlandı.
    
    Veritabanı bağlantısının yanı sıra, kullanıcıların güvenli bir şekilde kimlik doğrulaması yapabilmesi için JWT (JSON Web Token) kullanılıyor. JWT, her kullanıcı 
    için bir erişim token'ı ve bir yenileme token'ı oluşturuyor. Bu token'lar, kullanıcının uygulamaya giriş yapmasını sağlıyor ve kullanıcının oturumu boyunca güvenliği 
    artırmak için kullanılıyor. Ayrıca, token'ların ne kadar süre geçerli olacağı da bu konfigürasyonla belirleniyor.

  Kullanıcı Modeli ve Veritabanı Yapılandırması:
    Uygulamanın veritabanında kullanıcı bilgileri saklanıyor. Her kullanıcı için benzersiz bir kullanıcı adı ve e-posta adresi bulunuyor. Ayrıca, şifreler güvenlik 
    amacıyla hashlenmiş şekilde saklanıyor. Bunun dışında, her kullanıcının toplam puanı ve çalışma süresi gibi istatistikler de veritabanında tutuluyor.

  API Uç Noktaları (Endpoints):
    Projede, kullanıcı işlemleri için bir dizi API uç noktası (endpoint) oluşturuldu. Bu uç noktalar, kullanıcının kayıt olabilmesi, giriş yapabilmesi, profil bilgilerini 
    görüntüleyebilmesi gibi temel işlemleri gerçekleştiriyor.

    Kayıt Olma: Kullanıcılar, uygulamaya kayıt olabilmek için kullanıcı adı, e-posta adresi ve şifre bilgilerini girerler. Uygulama, bu bilgileri alır, doğrular ve veritabanına kaydeder.
  
    Giriş Yapma: Kullanıcılar, mevcut kullanıcı adı veya e-posta adresi ile giriş yaparak bir erişim token'ı alırlar. Bu token, uygulama içindeki diğer işlemleri yapabilmek için kullanılır.
  
    Profil Bilgisi Görüntüleme: Giriş yaptıktan sonra, kullanıcılar kendi profil bilgilerine erişebilirler. Bu işlem, kimlik doğrulama token'ı ile güvence altına alınır.
  
    Token Yenileme: Kullanıcılar, oturum süreleri dolmadan token'larını yenileyebilirler. Bu, kullanıcıların sürekli olarak yeniden giriş yapmalarını engeller.
  
    Çıkış Yapma: Kullanıcı çıkış yaptıktan sonra, token'ı geçersiz kılınır. Bu sayede, kullanıcı bir sonraki girişinde tekrar kimlik doğrulaması yapması gerekir.
  
    Flask ve MySQL’in yanı sıra JWT kullanımı, kullanıcı güvenliği ve verilerin doğru şekilde işlenmesi için önemli bir rol oynuyor. Uygulamanın tüm bu bileşenleri düzgün bir 
    şekilde entegre edilerek dağıtım süreci başarıyla tamamlanmıştır.