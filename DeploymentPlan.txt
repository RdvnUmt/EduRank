Project Name : EduRank 
Programming Assignment 3

Contributors:
Emirhan Gül 
Taha Denizbek Tavlan
Utku Karatepe
Rıdvan Umut Ünal


Tablo of Contents :

Deployment Overview 
Deployment Process
Configuration Plan

--Deployment Plan--

1. Deployment Overview

EduRank projesinin dağıtımı, test ve geliştirme aşamalarında yerel sunucu
ve sürekli entegrasyon/sürekli teslim (CI/CD) süreçleri kullanılarak gerçekleştirilmiştir.

Backend Dağıtımı: Backend bileşeni, takım üyelerimizden birinin bilgisayarında yerel bir Flask sunucusu olarak çalıştırılmıştır. 
Flask uygulaması, yerel bir MySQL veritabanına bağlanarak kullanıcı verilerini ve test sonuçlarını yönetmiştir.

Frontend Dağıtımı: Test sürecinde, Flutter ile geliştirilen mobil uygulamanın APK formatında bir test sürümü oluşturulmuş 
ve cihazlarda çalıştırılarak test edilmiştir.

Veritabanı: Backend ile entegre çalışan yerel bir MySQL sunucusu kullanılmıştır. Backend uygulaması, MySQL veritabanı 
bağlantısını sağlayarak gerekli verileri depolamıştır.

Geliştirme Ortamı: Proje geliştirme sürecinde Visual Studio Code, MySQL Workbench ve manuel geliştirme yöntemleri kullanılmıştır.

Dağıtım Süreci: Sürekli entegrasyon ve sürekli teslim (CI/CD) süreçleri uygulanarak, geliştirme ekibi GitHub üzerinden düzenli commit
ve push işlemleriyle kod tabanını güncel tutmuştur. Kod değişiklikleri anlık olarak takip edilerek, geliştirme ortamında test edilmiş
ve entegre edilmiştir.



2. Deployment Process

Backend Dağıtımı : 

Backend, ekibimizin lokal sunucusunda Flask ve MySQL kullanılarak dağıtıldı. Flask uygulaması, MySQL ile entegre edilerek çalıştırıldı.
Veritabanı bağlantısı için SQLAlchemy kullanıldı ve JWT kimlik doğrulama mekanizması eklendi. JWT sayesinde kullanıcı oturum yönetimi 
sağlandı ve belirlenen süreler içinde token geçerliliği ayarlandı. Veritabanı tablolarını oluşturmak için manuel SQL komutları 
kullanıldı. Kullanıcı bilgilerini saklamak ve çalışma istatistiklerini takip etmek amacıyla "users" tablosu oluşturuldu. Her kullanıcı 
için benzersiz bir kimlik, e-posta adresi ve hashlenmiş şifre saklanırken, toplam puan ve çalışma süresi de veritabanında tutuldu.
Dağıtım sırasında özel bir ortam değişkeni (".env" dosyası gibi) kullanılmadı, MySQL bağlantı bilgileri doğrudan kod içerisinde 
tanımlandı.Backend ve veritabanı testleri JSON dosyaları ve Postman kullanılarak gerçekleştirildi. API uç noktaları Postman üzerinden 
test edilerek isteklerin doğru şekilde işlendiği ve verilerin MySQL veritabanına başarılı bir şekilde kaydedildiği doğrulandı.


CI/CD ve Sürekli Entegrasyon :

Projede CI/CD için otomatikleştirilmiş bir sistem (GitHub Actions, Jenkins vb.) kullanılmadı. Ancak, geliştirme ekibinin her üyesi 
kodlarını sürekli olarak GitHub'a push etti ve her commit sonrası manuel testler gerçekleştirildi. Bir hata veya bug olduğunda version
kontrol yöntemi ile eski çalışan kod kullanılmaya devam edildi.

Frontend Dağıtımı :

Frontend testleri için uygulamanın APK dosyası oluşturuldu ve test cihazlarına doğrudan yüklenerek test edildi. Bunun için herhangi 
bir harici test platformu kullanılmadı.

Test Süreci :

Testler manuel olarak gerçekleştirildi. Test sürecinde:
Backend API'leri Postman veya manuel HTTP istekleri ile test edildi.
Frontend tarafında Flutter uygulaması APK olarak çalıştırılıp manuel testlerden geçirildi.
Veritabanı sorguları MySQL Workbench veya terminal aracılığıyla doğrulama yapılarak test edildi.
Sonuç olarak, proje lokal sunucu üzerinde dağıtıldı ve geliştirme ekibi tarafından manuel testlerle doğrulandı.
JSON dosyaları kullanılarak verilerin doğru işlendiği ve depolandığı kontrol edildi.


3. Configuration Plan:

Veritabanı ve JWT Ayarları :

Projede, kullanıcı bilgilerini ve diğer verileri saklamak için MySQL veritabanı kullanıldı. Flask uygulaması, bu veritabanına bağlanarak 
verileri depolamak için SQLAlchemy adlı bir kütüphane kullanıyor. Bu bağlantı, veritabanı adı ve bağlantı bilgileri (kullanıcı adı, 
şifre gibi) uygulama içinde doğrudan tanımlandı.

Veritabanı bağlantısının yanı sıra, kullanıcıların güvenli bir şekilde kimlik doğrulaması yapabilmesi için JWT (JSON Web Token) 
kullanılıyor. JWT, her kullanıcı için bir erişim token'ı ve bir yenileme token'ı oluşturuyor. Bu token'lar, kullanıcının uygulamaya 
giriş yapmasını sağlıyor ve kullanıcının oturumu boyunca güvenliği artırmak için kullanılıyor. Ayrıca, token'ların ne kadar süre 
geçerli olacağı da bu konfigürasyonla belirleniyor.

Kullanıcı Modeli ve Veritabanı Yapılandırması :

Uygulamanın veritabanında kullanıcı bilgileri saklanıyor. Her kullanıcı için benzersiz bir kullanıcı adı ve e-posta adresi bulunuyor.
Ayrıca, şifreler güvenlik amacıyla hashlenmiş şekilde saklanıyor. Bunun dışında, her kullanıcının toplam puanı ve çalışma süresi gibi 
istatistikler de veritabanında tutuluyor.

API Uç Noktaları (Endpoints) :

Projede, kullanıcı işlemleri için bir dizi API uç noktası (endpoint) oluşturuldu. Bu uç noktalar, kullanıcının kayıt olabilmesi,
giriş yapabilmesi, profil bilgilerini görüntüleyebilmesi gibi temel işlemleri gerçekleştiriyor.

Kayıt Olma: Kullanıcılar, uygulamaya kayıt olabilmek için kullanıcı adı, e-posta adresi ve şifre bilgilerini girerler. Uygulama,
bu bilgileri alır, doğrular ve veritabanına kaydeder.

Giriş Yapma: Kullanıcılar, mevcut kullanıcı adı veya e-posta adresi ile giriş yaparak bir erişim token'ı alırlar. 
Bu token, uygulama içindeki diğer işlemleri yapabilmek için kullanılır.

Profil Bilgisi Görüntüleme: Giriş yaptıktan sonra, kullanıcılar kendi profil bilgilerine erişebilirler. Bu işlem, kimlik doğrulama
token'ı ile güvence altına alınır.

Token Yenileme: Kullanıcılar, oturum süreleri dolmadan token'larını yenileyebilirler. Bu, kullanıcıların sürekli olarak yeniden 
giriş yapmalarını engeller.

Çıkış Yapma: Kullanıcı çıkış yaptıktan sonra, token'ı geçersiz kılınır. Bu sayede, kullanıcı bir sonraki girişinde tekrar kimlik 
doğrulaması yapması gerekir.

Flask ve MySQL’in yanı sıra JWT kullanımı, kullanıcı güvenliği ve verilerin doğru şekilde işlenmesi için önemli bir rol oynuyor. 
Uygulamanın tüm bu bileşenleri düzgün bir şekilde entegre edilerek dağıtım süreci başarıyla tamamlanmıştır.

TASK MATRİX :

Deployment Overview : Emirhan Gül

Deployment Process: Emirhan Gül

Configuration Plan: Emirhan Gül