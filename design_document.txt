Design Document

This document should detail the implementation approach and decision-making process. The
Design Document must be structured around 4 use cases. The following sections must be
included:



1. System Overview
    ● Brief Project Description: Summarize the project and its goals in 1-2 paragraphs:
        ilerlemelerini takip edebilecek, performanslarını izleyebilecek ve arkadaşlarıyla test başarı 
        Mobil tabanlı EduRank uygulaması sayesinde kullanıcılar test çözebilecek, çalışma 
        sonuçlarını, çalışma sürelerini karşılaştırabilecek. Ayrıca sadece çalışma süresini arkadaşlarıyla 
        karşılaştırmak isteyen bir kullanıcı, uygulama üzerinden test çözme zorunluluğu olmadan da sayaç 
        özelliğini kullanarak toplam çalışma süresine katkıda bulunabilecek. Kullanıcılar hesap 
        oluşturabilecek, testler çözebilecek, istatistiklerini analiz edebilecek ve başarı oranı veya çalışma 
        süresi istatistikleri sayesinde arkadaşlarıyla rekabet edebilecek. Bu proje, insanların çalışma 
        sürecini takip edebilmelerini sağlayarak ve çalışma alışkanlıkları hakkında analizler sunarak 
        verimliliği artırmayı, sorumluluk duygusunu geliştirmeyi ve öğrenme sürecinde insanları teşvik etmeyi 
        amaçlamaktadır.


    ● System Architecture: Provide an overview of the system architecture (e.g., layered,
    microservices):
    ????????????????????????

    ● Technology Stack: List the primary technologies used in the project (frontend, backend,
    databases, frameworks, etc.):
        frontend: Flutter-dart,
        backend: flask, MySQL,
        databases: MySQL,
        frameworks: Flutter.

2. Implementation Details
    ● Codebase Structure: Explain how the project is structured (folders, modules).
    ● Key Implementations:
        ○ Describe significant components or modules with explanations.
        ○ Explain core algorithms or business logic where applicable.
    ● Component Interfaces:
        ○ Define the interfaces of key components, including class/method signatures.
        ○ Provide API endpoint descriptions if applicable.
    ● Visual Interfaces:
        ○ Include wireframes or screenshots of user interfaces.

3. Use Case Support in Design
    ● Use Case Selection: Identify 4 important use cases from the Requirements
    Document.
    ● Requirement Mapping: Clearly state which functional requirements correspond to each
    use case.
    ● Use Case Design:
        ○ Detail how the system architecture supports each use case.
        ○ Provide diagrams or explanations of data flow, state changes, and interactions.
    ● Demo Requirement:
        ○ These four use cases must be fully implemented and will be demonstrated
    during the final project presentation.

4. Design Decisions
    ● Technology Comparisons: Compare at least two alternative technologies used in the
    project.
    ● Decision Justifications: Justify choices for databases, frameworks, and architecture.

5. GitHub Commit Requirement
    ● Code Implementations & Interfaces: Students must upload their implementations,
    component interfaces, and visual interface designs to GitHub.
    ● Technology Comparisons: The code snippets used for comparison must also be
    committed to the repository.
