Design Document

This document should detail the implementation approach and decision-making process. The
Design Document must be structured around 4 use cases. The following sections must be
included:



1. System Overview  
    ● Brief Project Description: Summarize the project and its goals in 1-2 paragraphs:
        Mobil tabanlı EduRank uygulaması sayesinde kullanıcılar test çözebilecek, çalışma 
        sonuçlarını, çalışma sürelerini karşılaştırabilecek. Ayrıca sadece çalışma süresini arkadaşlarıyla 
        karşılaştırmak isteyen bir kullanıcı, uygulama üzerinden test çözme zorunluluğu olmadan da sayaç 
        özelliğini kullanarak toplam çalışma süresine katkıda bulunabilecek. Kullanıcılar hesap 
        oluşturabilecek, testler çözebilecek, istatistiklerini analiz edebilecek ve başarı oranı veya çalışma 
        süresi istatistikleri sayesinde arkadaşlarıyla rekabet edebilecek. Bu proje, insanların çalışma 
        sürecini takip edebilmelerini sağlayarak ve çalışma alışkanlıkları hakkında analizler sunarak 
        verimliliği artırmayı, sorumluluk duygusunu geliştirmeyi ve öğrenme sürecinde insanları teşvik etmeyi 
        amaçlamaktadır.


    ● System Architecture: Provide an overview of the system architecture (e.g., layered,
    microservices):
    ????????????????????????

    ● Technology Stack: List the primary technologies used in the project (frontend, backend,
    databases, frameworks, etc.):
        frontend: Flutter-dart,
        backend: flask, MySQL,
        databases: MySQL,
        frameworks: Flutter.

2. Implementation Details
    ● Codebase Structure: Explain how the project is structured (folders, modules).
    ● Key Implementations:
        ○ Describe significant components or modules with explanations.
        ○ Explain core algorithms or business logic where applicable.

        Bileşenler ve Modüller:

        Kullanıcı Yönetimi: Kayıt, giriş, JWT ile kimlik doğrulama.
        Test Yönetimi: Test seçme, çözme, sorular arası geçiş, cevap değiştirme, sonuç kaydetme.
        Çalışma Süresi Takibi: Sayaç başlatma/durdurma, süreleri kaydetme, istatistik oluşturma.
        İstatistik & Veri Görselleştirme: Kullanıcı performans analizleri, grafik ve tablolar.
        Lider Tablosu: Çalışma süresi & test başarı oranına göre sıralama.

        Algoritmalar ve İş Mantığı:

        Kimlik Doğrulama: JWT token ile oturum yönetimi.
        Test Çözme: Sorular arası geçiş yapma, doğru cevap kontrolü ve başarı oranı hesaplama.
        Çalışma Süresi Takibi: Başlangıç-bitiş zaman damgalarıyla toplam süre kaydı.
        Lider Tablosu: Öncelik başarı oranı, eşitlikte çalışma süresine göre sıralama.
        Veri Görselleştirme: Çekilen istatistik verilerinin grafik ve tablolarla sunulması.

    ● Component Interfaces:
        ○ Define the interfaces of key components, including class/method signatures.
            Önemli ve temel metotların/bileşenlerin python taslak kodları:

            class User:
                def __init__(self, user_id: int, username: str, email: str, password_hash: str):
                    pass

                def register(self, username: str, email: str, password: str) -> bool:
                    """Kullanıcı kaydı oluşturur"""
                    pass

                def login(self, email: str, password: str) -> str:
                    """JWT Token döndürerek kullanıcı girişi yapar"""
                    pass

            class Test:
                def __init__(self, test_id: int, category: str, questions: list):
                    pass

                def start_test(self, user_id: int) -> dict:
                    """Kullanıcı için testi başlatır"""
                    pass

                def submit_answers(self, user_id: int, answers: dict) -> float:
                    """Test cevaplarını değerlendirir ve başarı oranı döndürür"""
                    pass

            class StudySession:
                def __init__(self, session_id: int, user_id: int, start_time: str, end_time: str):
                    pass

                def start_timer(self, user_id: int) -> bool:
                    """Çalışma süresi sayaç başlatır"""
                    pass

                def stop_timer(self, user_id: int) -> int:
                    """Sayaç durdurulur ve toplam çalışma süresi döndürülür"""
                    pass

            class Leaderboard:
                def __init__(self, user_id: int, study_time: int, test_score: float):
                    pass

                def get_ranking(self) -> list:
                    """Liderlik tablosunu sıralı olarak döndürür"""
                    pass


        ○ Provide API endpoint descriptions if applicable. 
        ?????????????????????????? api kullanıyor muyuz gençler?
    ● Visual Interfaces:
        ○ Include wireframes or screenshots of user interfaces.

3. Use Case Support in Design
    ● Use Case Selection: Identify 4 important use cases from the Requirements
    Document:
        case 1: 
        1-Kullanıcılar hesap oluşturabilmeli
        2-Kullanıcılar şifreleriyle giriş yapabilmelidir

        case 2: 
        1-Kullanıcılar şifreleriyle giriş yapabilmelidir
        2-Kullanıcılar test kategorilerinden seçim yapabilmeli
        2-Kullanıcılar test çözebilmelidir
        3-Kullanıcılar test çözerken sorular arasında geçiş yapabilmeli
        4-Kullanıcılar test çözerken yanıtlarını değiştirebilmeli

        case 3: 
        1-Kullanıcılar şifreleriyle giriş yapabilmelidir
        2-Kullanıcılar çalışma sürelerini bir sayaç/kronometre yardımıyla kaydedebilmelidir
        3-Kullanıcılar birbirlerinin çalışma sürelerini görüntüleyebilmelidir

        case 4: 
        1-Kullanıcılar şifreleriyle giriş yapabilmelidir
        2-Kullanıcıların çalışma istatistikleri ve test sonuçları kaydedilmelidir/görüntülenebilmelidir
        3-Kullanıcılar birbirlerinin test başarı oranlarını görüntüleyebilmelidir(liderlik tablosu)

    ● Requirement Mapping: Clearly state which functional requirements correspond to each
    use case.
    ● Use Case Design:
        ○ Detail how the system architecture supports each use case.
        ○ Provide diagrams or explanations of data flow, state changes, and interactions.
    ● Demo Requirement:
        ○ These four use cases must be fully implemented and will be demonstrated
        during the final project presentation.

4. Design Decisions
    ● Technology Comparisons: Compare at least two alternative technologies used in the
    project.
    ● Decision Justifications: Justify choices for databases, frameworks, and architecture.

5. GitHub Commit Requirement
    ● Code Implementations & Interfaces: Students must upload their implementations,
    component interfaces, and visual interface designs to GitHub.
    ● Technology Comparisons: The code snippets used for comparison must also be
    committed to the repository.
